Топ-50 Java Core вопросов и ответов на собеседовании. Часть 1 (javarush.ru)
Топ-50 Java Core вопросов и ответов на собеседовании. Часть 2 (javarush.ru)
Топ-50 Java Core вопросов и ответов на собеседовании. Часть 3 (javarush.ru)
1)	Рассказать про модификаторы доступа. Final поля, методы. Как будет происходить изменение видимости при наследовании. Привести пример.
2)	Что такое Interface. Дефолтный метод в интерфейсе. Что такое абстрактный класс, абстрактный метод.  Отличие интерфейса и абстрактного класса. Привести пример.
3)	Конструкторы. Понятие super, this. Аннотации Lombok @AllArgsConstructor, @NoArgsConstructor (знать, что такие есть) – как посмотреть какой код будет сгенерирован.  Паттерн Builder – для чего нужен. @Builder.   @Getter, @Setter   Примеры.
4)	Equals, hashCode – для чего используются. Comparator, Comparable. Привести пример.
5)	Коллекции – устройство ArrayList, LinkedList. Примеры создания, как обращаться к элементам.
6)	Коллекции  - устройство HashMap, TreeMap. Примеры создания, как обращаться к элементам.
7)	Коллекции – HashSet, TreeSet, LinkedHashSet.
8)	Как создать Stream из коллекции, массива. Привести примеры стримов с filter, map, forEach.    Создать юнит-тест.
9)	Привести примеры Optional, Function, BiFunction. Создать юнит тест.
10)	Некоторые инструменты разработки: Maven – для чего нужен. Как добавить зависимость. Что такое транзитивная зависимость. Плагин Jacoco – для чего нужен. SonarCube – для чего нужен.
11)	Exception, Error, Throwble. Проверяемые (checked) и непроверяемые (uncheked) exception. Создать свое исключение. Конструкция try-catch. Обработка исключений.
12)	Как создать поток. Привести примеры. Запуск потока. Блоки синхронизации, статические блоки синхронизации. Понятие монитора объекта
13)	Volatile переменные. Atomic-типы. ThreadLocal.   Привести примеры работы потоков с общими переменными. Какие проблемы могут возникнуть?


Задания к зачету.
1)	Создать класс User (name, surname, age). Сделать наследник Student , добавив поля – List<Byte> - это оценки. Сделать конструкторы, builder, getters, setters, toString через аннотации.  Сделать конструктор, в котором был конструктор суперкласса (super). Создать коллекцию List<Student> и наполнить ее данными (3-4 «студента»).
А) Stream: Сделать метод, который бы находил самого младшего студента. Метод, который бы выводил количество всех студентов со средним баллом больше 4.
Б) сделать компаратор, который бы сравнивал студентов сначала по имени, а потом по фамилии. Отсортировать коллекцию. Создать TreeSet<Student>.  Создать LinkedHashSet<Student>, поместить туда несколько значений и вывести в  лог содержимое этой коллекции, удостоверившись, что порядок ввода в коллекции сохраняется.
В) Сделать Function, которая сопоставляла бы студенту его среднюю оценку. Обработать случаи null (List<Byte>  равен null, элементы в этом списке равны null). Придумать пример BiFunction и какого-нибудь метода, в котором бы появлялся Optional.
Г) Предыдущие пункты А), Б), В), Г) покрыть юнит-тестами.
Д) Создать свое собственное исключение: сделать метод, который бы «назначал стипендию», а для студентов, у которых в списке оценок есть 2 и 3, бросал исключение с текстом «Недостаточно хорошие оценки».
Е) Добавить в сборку jacoco плагин и показать покрытие тестами
Ж) Запустить в отдельном потоке метод, который бы каждую секунду добавлял случайную оценку в список оценок студента и выводил в лог эту добавленную оценку
З) Сделать 2 потока:  первый добавляет оценки студенту (случайным образом – 2,3,4,5), а второй «исправляет двойки и тройки», если они есть. Использовать synchronize. А третий поток каждую секунду вычисляет средний балл, выводит его в лог и сообщает, можно ли данному студенту начислить стипендию.
